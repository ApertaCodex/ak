#!/bin/bash
# AK API Key Manager - Quick Install Script (with QtBase via aqt)
# Installs ONLY qtbase (no WebEngine) for Qt 6.9.x and builds AK against it.

set -euo pipefail

# ----------------------------- Logging helpers ------------------------------
log_message() { echo "$1"; }
log_error()   { echo "‚ùå ERROR: $1" >&2; }
log_warning() { echo "‚ö†Ô∏è  WARNING: $1" >&2; }
log_success() { echo "‚úÖ SUCCESS: $1"; }

# ----------------------------- Config knobs --------------------------------
# Prefer aqt-based Qt (recommended). Set AK_QT_INSTALL=fallback to force apt path.
AK_QT_INSTALL="${AK_QT_INSTALL:-aqt}"
# Default Qt version (can override: QT_VER=6.9.0 ./install.sh)
QT_VER="${QT_VER:-6.9.2}"
QT_ARCH="${QT_ARCH:-linux_gcc_64}"
QT_ROOT="${QT_ROOT:-$HOME/Qt}"                  # Where aqt will place Qt
QT_ENV_FILE="${QT_ENV_FILE:-$HOME/.config/ak/qt-env.sh}"

# ----------------------------- APT helpers ---------------------------------
apt_operation() {
  local max_attempts=2 timeout=120
  if [[ "$*" == *"update"* ]]; then max_attempts=1; timeout=60; fi
  for attempt in $(seq 1 $max_attempts); do
    if [ $attempt -gt 1 ]; then log_warning "Retrying apt operation ($attempt/$max_attempts)..."; sleep 3; fi
    local lock_wait=0
    while [ $lock_wait -lt 30 ] && (sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || sudo lsof /var/lib/apt/lists/lock >/dev/null 2>&1 || sudo lsof /var/lib/dpkg/lock >/dev/null 2>&1); do
      if [ $lock_wait -eq 0 ]; then log_warning "APT is locked. Waiting..."; fi
      sleep 2; lock_wait=$((lock_wait+2))
    done
    if timeout $timeout sudo "$@" \
      -o Acquire::Retries=1 -o Acquire::http::Timeout=30 -o Acquire::https::Timeout=30 \
      -o APT::Get::Fix-Missing=true -o APT::Get::AllowUnauthenticated=false \
      2> >(grep -v -E "(W:|WARNING:|Ign:|Hit:|Get:.*InRelease|Reading package lists|Building dependency tree|Reading state information)" >&2) \
      > >(grep -v -E "(Hit:|Get:.*InRelease|Reading package lists|Building dependency tree|Reading state information)" || true); then
      return 0
    fi
  done
  [[ "$*" == *"install"* ]] && { log_warning "APT install failed after retries"; return 1; }
  log_warning "APT op failed after retries, continuing..."; return 0
}

apt_update() { log_message "üîÑ Updating package list..."; apt_operation apt update || true; }

safe_mkdir() { sudo mkdir -p "$1" 2>/dev/null || { log_warning "mkdir $1 failed, continuing..."; return 1; }; }

safe_copy() { local s="$1" d="$2"; [[ -f "$s" ]] && sudo cp -f "$s" "$d" 2>/dev/null || { log_warning "copy $s -> $d failed"; return 1; }; }

# ----------------------------- Version helpers -----------------------------
compare_versions() {
  # Return 0 if $1 >= $2
  local IFS=.
  read -r -a a <<< "${1:-0}"; read -r -a b <<< "${2:-0}"
  for i in 0 1 2; do
    local x="${a[i]:-0}" y="${b[i]:-0}"
    ((x>y)) && return 0
    ((x<y)) && return 1
  done
  return 0
}

get_qt6_version() {
  local v=""
  if command -v qmake6 >/dev/null 2>&1; then v=$(qmake6 -query QT_VERSION 2>/dev/null || true); fi
  echo "$v"
}

# ----------------------------- Qt via aqt ----------------------------------
ensure_python_bits() {
  # Ensure python3, pip, venv
  if ! command -v python3 >/dev/null 2>&1; then
    apt_update; apt_operation apt install -y python3 python3-venv python3-pip || true
  fi
}

install_aqt_via_pipx_or_venv() {
  # Try pipx first
  if ! command -v pipx >/dev/null 2>&1; then
    python3 -m pip install --user --upgrade pipx >/dev/null 2>&1 || true
    python3 -m pipx ensurepath >/dev/null 2>&1 || true
    # rehash current PATH in case pipx got added
    hash -r 2>/dev/null || true
  fi
  if command -v pipx >/dev/null 2>&1; then
    pipx install --force aqtinstall >/dev/null 2>&1 || pipx upgrade aqtinstall >/dev/null 2>&1 || true
    if command -v aqt >/dev/null 2>&1; then return 0; fi
  fi
  # Fallback: dedicated venv
  local venv="$HOME/.local/aqt-venv"
  python3 -m venv "$venv"
  # shellcheck disable=SC1090
  source "$venv/bin/activate"
  pip install -U pip aqtinstall >/dev/null 2>&1
  hash -r 2>/dev/null || true
  command -v aqt >/dev/null 2>&1 || { log_error "aqt not found even after venv install"; return 1; }
}

install_qtbase_with_aqt() {
  log_message "üì¶ Installing QtBase only via aqt (Qt $QT_VER, $QT_ARCH)..."
  ensure_python_bits
  install_aqt_via_pipx_or_venv || { log_warning "Could not set up aqt"; return 1; }

  # List archs (debug info)
  aqt list-qt linux desktop --arch "$QT_VER" >/dev/null 2>&1 || true

  # Install ONLY qtbase
  if aqt install-qt linux desktop "$QT_VER" "$QT_ARCH" -O "$QT_ROOT" --archives qtbase; then
    export QTDIR="$QT_ROOT/$QT_VER/$QT_ARCH"
    export PATH="$QTDIR/bin:$PATH"
    export LD_LIBRARY_PATH="$QTDIR/lib:${LD_LIBRARY_PATH:-}"
    export QT_PLUGIN_PATH="$QTDIR/plugins:${QT_PLUGIN_PATH:-}"

    # Persist env for future shells
    mkdir -p "$(dirname "$QT_ENV_FILE")"
    cat > "$QT_ENV_FILE" <<EOF
# Auto-generated by AK installer
export QTDIR="$QTDIR"
export PATH="\$QTDIR/bin:\$PATH"
export LD_LIBRARY_PATH="\$QTDIR/lib:\${LD_LIBRARY_PATH:-}"
export QT_PLUGIN_PATH="\$QTDIR/plugins:\${QT_PLUGIN_PATH:-}"
export CMAKE_PREFIX_PATH="\$QTDIR:\${CMAKE_PREFIX_PATH:-}"
export Qt6_DIR="\$QTDIR/lib/cmake/Qt6"
EOF
    log_success "QtBase installed at $QTDIR"
    log_message "üß© To use later: source $QT_ENV_FILE"
    return 0
  else
    log_warning "aqt QtBase install failed."
    return 1
  fi
}

# ----------------------------- Build AK ------------------------------------
build_ak_gui_from_source() {
  log_message "üõ†Ô∏è Building AK from current source with GUI enabled..."

  # If QTDIR exists (aqt path), skip installing Ubuntu Qt dev packages
  if [[ -n "${QTDIR:-}" && -x "$QTDIR/bin/qmake6" ]]; then
    log_message "üîó Using aqt-provided Qt at: $QTDIR"
    apt_update
    apt_operation apt install -y build-essential cmake git libgl1-mesa-dev pkg-config || {
      log_warning "Some build deps failed to install; continuing..."
    }
    local cmake_prefix="-DCMAKE_PREFIX_PATH=$QTDIR -DQt6_DIR=$QTDIR/lib/cmake/Qt6"
  else
    log_message "üì¶ No aqt Qt detected; falling back to Ubuntu Qt dev packages"
    apt_update
    apt_operation apt install -y build-essential cmake git qt6-base-dev qt6-tools-dev qt6-tools-dev-tools libqt6svg6-dev || {
      log_warning "Failed to install some Qt dev packages; continuing..."
    }
    local cmake_prefix=""
  fi

  # Verify project root
  local current_dir; current_dir=$(pwd)
  if [ ! -f "$current_dir/CMakeLists.txt" ]; then
    log_error "Not in AK project directory. CMakeLists.txt not found."
    return 1
  fi

  (
    set -e
    cd "$current_dir"
    rm -rf build
    mkdir -p build
    cd build
    cmake .. -DBUILD_GUI=ON -DCMAKE_BUILD_TYPE=Release $cmake_prefix
    make -j"$(nproc 2>/dev/null || echo 2)"
    sudo make install
  ) || { log_error "Building or installing AK with GUI failed"; return 1; }

  return 0
}

# ----------------------------- Symlinks & desktop ---------------------------
ensure_ak_links() {
  if [ -x "/usr/local/bin/ak" ] && [ ! -L "/usr/local/bin/ak" ]; then
    log_success "Found working AK binary at /usr/local/bin/ak"
    local target="/usr/local/bin/ak"
  else
    log_warning "AK binary not found at /usr/local/bin/ak or is a symlink"; return 1
  fi

  local USER_HOME; USER_HOME=$(eval echo ~${SUDO_USER:-$USER})
  if [ -n "$USER_HOME" ] && [ "$USER_HOME" != "/" ]; then
    local user_bin="$USER_HOME/.local/bin"
    sudo -u "${SUDO_USER:-$USER}" mkdir -p "$user_bin" 2>/dev/null || mkdir -p "$user_bin" 2>/dev/null
    [ -e "$user_bin/ak" ] && [ ! -L "$user_bin/ak" ] && mv "$user_bin/ak" "$user_bin/ak.bak.$(date +%s)" 2>/dev/null || true
    sudo -u "${SUDO_USER:-$USER}" ln -sfn "$target" "$user_bin/ak" 2>/dev/null || ln -sfn "$target" "$user_bin/ak" 2>/dev/null || log_warning "Failed to link $user_bin/ak"
    chown -h "${SUDO_USER:-$USER}:${SUDO_USER:-$USER}" "$user_bin/ak" 2>/dev/null || true
  fi

  safe_mkdir "/usr/bin"
  [ -e "/usr/bin/ak" ] && [ ! -L "/usr/bin/ak" ] && sudo mv "/usr/bin/ak" "/usr/bin/ak.bak.$(date +%s)" 2>/dev/null || sudo rm -f "/usr/bin/ak" 2>/dev/null || true
  sudo ln -sfn "$target" "/usr/bin/ak" 2>/dev/null || log_warning "Failed to link /usr/bin/ak -> $target"

  log_message "üîó AK linked at:"
  log_message "   ‚Ä¢ /usr/local/bin/ak (main binary)"
  for p in "/usr/bin/ak" "${USER_HOME:-}/.local/bin/ak"; do
    [ -e "$p" ] || [ -L "$p" ] && log_message "   ‚Ä¢ $p -> $(readlink -f "$p" 2>/dev/null || echo "$p")"
  done
}

# ----------------------------- Main flow -----------------------------------
install_ak() {
  log_message "üöÄ Installing AK API Key Manager from source (GUI)..."
  apt_update

  # Try aqt path unless forced fallback
  if [[ "$AK_QT_INSTALL" == "aqt" ]]; then
    if install_qtbase_with_aqt; then
      log_success "Using aqt QtBase ($QT_VER)"
      # shellcheck disable=SC1090
      [ -f "$QT_ENV_FILE" ] && source "$QT_ENV_FILE"
    else
      log_warning "Proceeding without aqt Qt; will try Ubuntu Qt dev packages."
    fi
  else
    log_message "‚§¥Ô∏è  Skipping aqt (AK_QT_INSTALL=$AK_QT_INSTALL); using Ubuntu Qt packages"
  fi

  # Informative version check
  local DETECTED_QT="$(get_qt6_version)"
  if [ -n "$DETECTED_QT" ]; then
    log_message "üìç Qt6 detected: $DETECTED_QT"
    local REQUIRED_QT_VERSION="6.8.0"
    if compare_versions "$DETECTED_QT" "$REQUIRED_QT_VERSION"; then
      log_success "Qt6 $DETECTED_QT is compatible"
    else
      log_warning "Qt6 $DETECTED_QT may be too old; build could fail"
    fi
  else
    log_message "‚ÑπÔ∏è  No qmake6 on PATH yet; build will rely on CMake hints."
  fi

  # Build
  if build_ak_gui_from_source; then
    log_success "Built and installed AK with GUI support."
  else
    log_error "Building AK with GUI failed."; return 1
  fi

  ensure_ak_links || true

  # Desktop integration (kept from your original script, trimmed for brevity)
  log_message "üñ•Ô∏è  Installing desktop integration..."
  safe_mkdir "/usr/share/applications"
  safe_copy "${0%/*}/ak.desktop" "/usr/share/applications/ak.desktop" || true
  safe_mkdir "/usr/share/icons/hicolor/scalable/apps"
  safe_copy "${0%/*}/logo.svg" "/usr/share/icons/hicolor/scalable/apps/ak.svg" || true
  command -v update-desktop-database >/dev/null 2>&1 && sudo update-desktop-database /usr/share/applications 2>/dev/null || true

  log_success "Installation complete!"
  log_message "üß© If you want Qt env in new shells: add 'source $QT_ENV_FILE' to your shell rc."
}

cleanup_installation() { :; }
trap cleanup_installation EXIT INT TERM

install_ak || true
cleanup_installation

log_success "Installation completed (script exit 0)."
exit 0
