#!/usr/bin/env bash
# install-ak.sh
# AK API Key Manager - Full installer with QtBase 6.9 via aqt (base-only) and system fallback.
# - Prefers Qt 6.9.x (qtbase only) installed by aqt
# - Writes ~/.config/ak/qt-env.sh
# - Builds with CMAKE_INSTALL_RPATH so ak runs without env hacks
# - Falls back to Ubuntu Qt 6.8 if aqt fails
# - Installs GTK bits to silence warnings when launching build/ak

set -Eeuo pipefail

# ========= logging =========
log()  { echo -e "$*"; }
ok()   { echo -e "✅ $*"; }
warn() { echo -e "⚠️  $*" >&2; }
err()  { echo -e "❌ $*" >&2; }

# ========= knobs =========
AK_QT_INSTALL="${AK_QT_INSTALL:-aqt}"              # aqt | fallback
QT_VER="${QT_VER:-6.9.2}"                          # 6.9.2 by default
QT_ARCH="${QT_ARCH:-linux_gcc_64}"                 # linux_gcc_64
QT_ROOT="${QT_ROOT:-$HOME/Qt}"                     # aqt install root
QT_ENV_FILE="${QT_ENV_FILE:-$HOME/.config/ak/qt-env.sh}"

PROJECT_NAME="AK (API Key Manager)"
BUILD_DIR="build"
INSTALL_PREFIX="/usr/local"
SYSTEM_QT_CMAKE_DIR="/usr/lib/x86_64-linux-gnu/cmake/Qt6"

# ========= helpers =========
apt_update_quiet() {
  if command -v apt >/dev/null 2>&1; then
    log "🔄 Updating package list..."
    sudo apt update -o Acquire::Retries=1 -o APT::Get::Fix-Missing=true || true
  fi
}

apt_install_quiet() {
  if command -v apt >/dev/null 2>&1; then
    sudo apt install -y "$@" || true
  fi
}

ensure_build_deps() {
  apt_update_quiet
  apt_install_quiet build-essential cmake git pkg-config libgl1-mesa-dev
}

ensure_gtk_deps() {
  # quiet down GTK / canberra spam when running build/ak
  apt_update_quiet
  apt_install_quiet libgtk-3-0 libgtk-3-common libcanberra-gtk-module libcanberra-gtk3-module
}

compare_versions_ge() {
  # returns 0 if $1 >= $2
  local IFS=.
  read -r -a A <<< "${1:-0}"
  read -r -a B <<< "${2:-0}"
  for i in 0 1 2; do
    local a="${A[i]:-0}" b="${B[i]:-0}"
    ((a>b)) && return 0
    ((a<b)) && return 1
  done
  return 0
}

detect_qmake_ver() {
  local v=""
  if command -v qmake6 >/dev/null 2>&1; then
    v="$(qmake6 -query QT_VERSION 2>/dev/null || true)"
  fi
  echo "$v"
}

# ========= aqt path =========
ensure_python_aqt() {
  if ! command -v python3 >/dev/null 2>&1; then
    apt_update_quiet
    apt_install_quiet python3 python3-venv python3-pip
  fi

  # pipx preferred (avoids PEP 668 issues)
  if ! command -v pipx >/dev/null 2>&1; then
    python3 -m pip install --user --upgrade pipx || true
    python3 -m pipx ensurepath || true
    hash -r || true
  fi

  if command -v pipx >/dev/null 2>&1; then
    if ! command -v aqt >/dev/null 2>&1; then
      pipx install aqtinstall || pipx upgrade aqtinstall || true
      hash -r || true
    fi
  fi

  # fallback: dedicated venv if pipx missing
  if ! command -v aqt >/dev/null 2>&1; then
    local venv="$HOME/.local/aqt-venv"
    python3 -m venv "$venv"
    # shellcheck disable=SC1090
    source "$venv/bin/activate"
    pip install -U pip aqtinstall
    hash -r || true
  fi

  command -v aqt >/dev/null 2>&1
}

install_qtbase_with_aqt() {
  log "📦 Installing QtBase via aqt (Qt ${QT_VER}, ${QT_ARCH})..."
  ensure_python_aqt || { warn "cannot set up aqt"; return 1; }

  # show archs (best-effort)
  aqt list-qt linux desktop --arch "$QT_VER" >/dev/null 2>&1 || true

  # try official base (avoid flaky mirrors); add retries/timeouts
  if ! aqt install-qt \
        --base https://download.qt.io \
        --timeout 240 --retries 6 \
        linux desktop "$QT_VER" "$QT_ARCH" \
        -O "$QT_ROOT" --archives qtbase; then
    warn "aqt download failed; retrying with default mirror rotation..."
    aqt install-qt linux desktop "$QT_VER" "$QT_ARCH" -O "$QT_ROOT" --archives qtbase
  fi

  local qtdir="$QT_ROOT/$QT_VER/$QT_ARCH"
  if [[ -x "$qtdir/bin/qmake6" ]]; then
    mkdir -p "$(dirname "$QT_ENV_FILE")"
    cat > "$QT_ENV_FILE" <<EOF
# Auto-generated by ${PROJECT_NAME} installer
export QTDIR="$qtdir"
export PATH="\$QTDIR/bin:\$PATH"
export LD_LIBRARY_PATH="\$QTDIR/lib:\${LD_LIBRARY_PATH:-}"
export QT_PLUGIN_PATH="\$QTDIR/plugins:\${QT_PLUGIN_PATH:-}"
export CMAKE_PREFIX_PATH="\$QTDIR:\${CMAKE_PREFIX_PATH:-}"
export Qt6_DIR="\$QTDIR/lib/cmake/Qt6"
EOF
    ok "QtBase installed at $qtdir"
    ok "Env file written: $QT_ENV_FILE"
    echo "To use now: source \"$QT_ENV_FILE\""
    return 0
  fi

  return 1
}

# ========= build/install =========
cmake_configure_and_build() {
  local cmake_extra=()
  local use_aqt="${1:-0}"

  # If using aqt Qt, embed rpath so /usr/local/bin/ak finds Qt 6.9 libs without env vars.
  if [[ "$use_aqt" == "1" ]]; then
    # shellcheck disable=SC1090
    source "$QT_ENV_FILE"
    cmake_extra+=(
      "-DCMAKE_PREFIX_PATH=$QTDIR"
      "-DQt6_DIR=$QTDIR/lib/cmake/Qt6"
      "-DCMAKE_INSTALL_RPATH=$QTDIR/lib"
      "-DCMAKE_BUILD_WITH_INSTALL_RPATH=ON"
      "-DCMAKE_SKIP_BUILD_RPATH=OFF"
      "-DCMAKE_SKIP_INSTALL_RPATH=OFF"
    )
    log "🔗 Building against aqt Qt at: $QTDIR"
  else
    # system Qt (Ubuntu 6.8.*)
    cmake_extra+=("-DQt6_DIR=$SYSTEM_QT_CMAKE_DIR")
    log "🔗 Building against system Qt CMake at: $SYSTEM_QT_CMAKE_DIR"
  fi

  # must-have build deps
  ensure_build_deps

  # verify project root
  if [[ ! -f "./CMakeLists.txt" ]]; then
    err "Run this script from the AK project root (CMakeLists.txt not found)"
    exit 1
  fi

  # full clean build
  rm -rf "$BUILD_DIR"
  cmake -S . -B "$BUILD_DIR" \
    -DBUILD_GUI=ON \
    -DCMAKE_BUILD_TYPE=Release \
    "${cmake_extra[@]}"

  cmake --build "$BUILD_DIR" -j"$(nproc 2>/dev/null || echo 2)"
  sudo cmake --install "$BUILD_DIR"
}

ldd_show_qt_bindings() {
  command -v ldd >/dev/null 2>&1 || return 0
  if [[ -x "$INSTALL_PREFIX/bin/ak" ]]; then
    echo "— linked Qt libs —"
    ldd "$INSTALL_PREFIX/bin/ak" | grep -E 'Qt6(Core|Gui|Widgets|Svg|Network)' || true
    echo "————"
  fi
}

ensure_symlinks() {
  if [[ -x "$INSTALL_PREFIX/bin/ak" ]] && [[ ! -L "$INSTALL_PREFIX/bin/ak" ]]; then
    ok "Found working AK binary at $INSTALL_PREFIX/bin/ak"
    local target="$INSTALL_PREFIX/bin/ak"
    # /usr/bin
    sudo ln -sfn "$target" /usr/bin/ak 2>/dev/null || warn "link /usr/bin/ak failed"
    # $HOME/.local/bin
    local user_bin="$HOME/.local/bin"
    mkdir -p "$user_bin"
    ln -sfn "$target" "$user_bin/ak" 2>/dev/null || warn "link $user_bin/ak failed"
    ok "Symlinks ready: /usr/bin/ak and $user_bin/ak"
  else
    warn "AK binary not present at $INSTALL_PREFIX/bin/ak"
  fi
}

install_desktop_files() {
  # minimal, system-level
  sudo install -d /usr/share/applications /usr/share/icons/hicolor/scalable/apps
  [[ -f "./ak.desktop" ]] && sudo install -m 644 ./ak.desktop /usr/share/applications/ak.desktop || true
  [[ -f "./logo.svg"  ]] && sudo install -m 644 ./logo.svg  /usr/share/icons/hicolor/scalable/apps/ak.svg || true
  command -v update-desktop-database >/dev/null 2>&1 && sudo update-desktop-database /usr/share/applications || true
}

verify_runtime_and_hints() {
  echo
  log "🔍 Verifying runtime..."
  if "$INSTALL_PREFIX/bin/ak" --version >/dev/null 2>&1; then
    ok "AK runs successfully."
    return 0
  fi

  # failed to run; print diagnostics
  if "$INSTALL_PREFIX/bin/ak" 2>&1 | grep -q "Qt_6.9' not found"; then
    warn "Runtime is loading older Qt (6.8) instead of required 6.9."
    if [[ -f "$QT_ENV_FILE" ]]; then
      echo "→ Try: source \"$QT_ENV_FILE\" && ak"
    else
      echo "→ Ensure aqt path installed or rebuild against system Qt (see below)."
    fi
  fi

  echo
  echo "🔧 Remediation options:"
  echo "  A) Use aqt Qt at runtime:"
  echo "     source \"$QT_ENV_FILE\" && ak"
  echo
  echo "  B) Rebuild against system Qt (no 6.9 requirement):"
  echo "     unset QTDIR Qt6_DIR CMAKE_PREFIX_PATH LD_LIBRARY_PATH"
  echo "     rm -rf $BUILD_DIR"
  echo "     cmake -S . -B $BUILD_DIR -DBUILD_GUI=ON -DCMAKE_BUILD_TYPE=Release -DQt6_DIR=$SYSTEM_QT_CMAKE_DIR"
  echo "     cmake --build $BUILD_DIR -j\$(nproc)"
  echo "     sudo cmake --install $BUILD_DIR"
}

# ========= main =========
log "🚀 Installing $PROJECT_NAME with GUI…"

# GTK helpers for nicer runtime (esp. when running build/ak)
ensure_gtk_deps

USE_AQT=0
if [[ "$AK_QT_INSTALL" == "aqt" ]]; then
  if install_qtbase_with_aqt; then
    USE_AQT=1
  else
    warn "aqt install failed; falling back to system Qt dev packages."
  fi
fi

if [[ "$USE_AQT" == "0" ]]; then
  # system Qt dev
  apt_update_quiet
  apt_install_quiet qt6-base-dev qt6-tools-dev qt6-tools-dev-tools libqt6svg6-dev
  # optional: validate system Qt is recent enough (we can live with 6.8)
  sys_ver="$(detect_qmake_ver || true)"
  [[ -n "$sys_ver" ]] && ok "Detected system Qt: $sys_ver"
fi

# Build & install with chosen toolchain
cmake_configure_and_build "$USE_AQT"

# Show what ak is linked against
ldd_show_qt_bindings

# Symlinks and desktop file (best effort)
ensure_symlinks
install_desktop_files

ok "Installation complete."

# Final verification / guidance
verify_runtime_and_hints
