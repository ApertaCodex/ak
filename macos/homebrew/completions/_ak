#compdef ak ak-gui

# AK Zsh Completion
# This file provides zsh completion for the ak command-line tool

_ak() {
    local context state state_descr line
    typeset -A opt_args
    
    _arguments -C \
        '(-h --help)'{-h,--help}'[Show help information]' \
        '(-v --version)'{-v,--version}'[Show version information]' \
        '--json[Output in JSON format]' \
        '1: :_ak_commands' \
        '*:: :->args' && return 0
    
    case $state in
        args)
            case $words[1] in
                secret)
                    _ak_secret
                    ;;
                profile)
                    _ak_profile
                    ;;
                service)
                    _ak_service
                    ;;
                get|cp|rm)
                    _ak_keys
                    ;;
                load)
                    _ak_profiles_and_keys
                    ;;
                save|unload|duplicate)
                    _ak_profiles
                    ;;
                set|add)
                    _ak_keys
                    ;;
                test)
                    _ak_test_completions
                    ;;
            esac
            ;;
    esac
}

_ak_commands() {
    local commands
    commands=(
        # Main namespaced commands
        'secret:Secret/API key management'
        'profile:Profile management'
        'service:Service configuration and testing'
        
        # Legacy/alias commands
        'add:Add a new secret (alias for secret add)'
        'set:Set a secret value (alias for secret set)'
        'get:Get a secret value (alias for secret get)'
        'ls:List secrets (alias for secret ls)'
        'rm:Remove a secret (alias for secret rm)'
        'search:Search secrets (alias for secret search)'
        'cp:Copy secret to clipboard (alias for secret cp)'
        
        # Profile management (legacy aliases)
        'save:Save current profile'
        'load:Load profile or individual key'
        'unload:Unload profile'
        'profiles:List available profiles'
        'duplicate:Duplicate a profile'
        
        # Utilities
        'test:Test API connections'
        'doctor:Diagnose configuration issues'
        'audit:View audit log'
        'export:Export data'
        'import:Import data'
        'migrate:Migrate data'
        
        # System
        'install-shell:Install shell integration'
        'uninstall:Uninstall ak'
        'completion:Generate completion scripts'
        'serve:Start HTTP server'
        'gui:Launch GUI interface'
        
        # Info
        'help:Show help information'
        'version:Show version information'
        'welcome:Show welcome message'
    )
    _describe 'commands' commands
}

_ak_secret() {
    local secret_commands
    secret_commands=(
        'add:Add a new secret'
        'set:Set a secret value'
        'get:Get a secret value'
        'ls:List all secrets'
        'rm:Remove a secret'
        'search:Search secrets by name pattern'
        'cp:Copy secret to clipboard'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'secret commands' secret_commands
    else
        case $words[2] in
            get|rm|cp|set)
                _ak_keys
                ;;
            add)
                # For add, can suggest existing keys or allow new ones
                _ak_keys
                ;;
            search)
                # For search, just allow any pattern
                ;;
        esac
    fi
}

_ak_profile() {
    local profile_commands
    profile_commands=(
        'create:Create new profile'
        'list:List all profiles'
        'show:Show profile details'
        'activate:Activate profile'
        'delete:Delete profile'
        'export:Export profile'
        'import:Import profile'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'profile commands' profile_commands
    else
        case $words[2] in
            show|activate|delete|export)
                _ak_profiles
                ;;
            import)
                _files
                ;;
        esac
    fi
}

_ak_service() {
    local service_commands
    service_commands=(
        'list:List available services'
        'add:Add new service'
        'remove:Remove service'
        'test:Test service connection'
        'configure:Configure service'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'service commands' service_commands
    else
        case $words[2] in
            remove|test|configure)
                _ak_services
                ;;
        esac
    fi
}

_ak_test_completions() {
    local test_args
    test_args=(
        '--fail-fast:Stop on first failure'
        '--json:Output in JSON format'  
        '--quiet:Suppress output'
        '-p:Specify profile'
        '--profile:Specify profile'
    )
    
    if [[ $words[CURRENT-1] == "-p" || $words[CURRENT-1] == "--profile" ]]; then
        _ak_profiles
    else
        local services profiles keys
        services=(
            'openai:OpenAI API'
            'anthropic:Anthropic Claude API'
            'google:Google APIs'
            'github:GitHub API'
            'gitlab:GitLab API'
            'bitbucket:Bitbucket API'
            'azure:Microsoft Azure APIs'
            'aws:Amazon Web Services APIs'
            'gcp:Google Cloud Platform APIs'
            'digitalocean:DigitalOcean API'
            'linode:Linode API'
            'vultr:Vultr API'
            'hetzner:Hetzner Cloud API'
        )
        
        _alternative \
            'services:services:_describe "services" services' \
            'profiles:profiles:_ak_profiles' \
            'keys:keys:_ak_keys' \
            'options:options:_describe "options" test_args'
    fi
}

# Helper functions to get dynamic completions
_ak_profiles() {
    local profiles
    if (( $+commands[ak] )); then
        profiles=(${(f)"$(ak profiles 2>/dev/null | grep -v "Available profiles:" | grep -v "^$" | sed 's/^[[:space:]]*//')"})
        _describe 'profiles' profiles
    fi
}

_ak_keys() {
    local keys
    if (( $+commands[ak] )); then
        # Try JSON output first, fall back to plain text
        keys=(${(f)"$(ak secret ls --json 2>/dev/null | grep -o '"name":"[^"]*"' | cut -d'"' -f4 2>/dev/null || ak secret ls 2>/dev/null | awk '{print $1}' | grep -v "Available\|Total\|ðŸ“‚" | grep -v "^$")"})
        _describe 'keys' keys
    fi
}

_ak_profiles_and_keys() {
    local profiles keys combined
    if (( $+commands[ak] )); then
        profiles=(${(f)"$(ak profiles 2>/dev/null | grep -v "Available profiles:" | grep -v "^$" | sed 's/^[[:space:]]*//')"})
        keys=(${(f)"$(ak secret ls --json 2>/dev/null | grep -o '"name":"[^"]*"' | cut -d'"' -f4 2>/dev/null || ak secret ls 2>/dev/null | awk '{print $1}' | grep -v "Available\|Total\|ðŸ“‚" | grep -v "^$")"})
        combined=($profiles $keys)
        _describe 'profiles and keys' combined
    fi
}

_ak_services() {
    local services
    services=(
        'openai:OpenAI API'
        'anthropic:Anthropic Claude API'
        'google:Google APIs'
        'github:GitHub API'
        'gitlab:GitLab API'
        'bitbucket:Bitbucket API'
        'azure:Microsoft Azure APIs'
        'aws:Amazon Web Services APIs'
        'gcp:Google Cloud Platform APIs'
        'digitalocean:DigitalOcean API'
        'linode:Linode API'
        'vultr:Vultr API'
        'hetzner:Hetzner Cloud API'
    )
    _describe 'services' services
}

# Completion for ak-gui
_ak-gui() {
    _arguments \
        '(-h --help)'{-h,--help}'[Show help information]' \
        '(-v --version)'{-v,--version}'[Show version information]' \
        '--profile[Specify profile]:profile:_ak_profiles' \
        '--config[Specify config file]:config file:_files -g "*.conf"' \
        '--theme[UI theme]:theme:(light dark auto)' \
        '--debug[Enable debug mode]'
}

# Register completions
_ak "$@"

# Also handle ak-gui if it exists
if (( $+commands[ak-gui] )); then
    compdef _ak-gui ak-gui
fi