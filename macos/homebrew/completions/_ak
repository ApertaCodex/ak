#compdef ak ak-gui

# AK Zsh Completion
# This file provides zsh completion for the ak command-line tool

_ak() {
    local context state state_descr line
    typeset -A opt_args
    
    _arguments -C \
        '(-h --help)'{-h,--help}'[Show help information]' \
        '(-v --version)'{-v,--version}'[Show version information]' \
        '--verbose[Enable verbose output]' \
        '--quiet[Suppress non-error output]' \
        '--config[Specify config file]:config file:_files -g "*.conf"' \
        '--profile[Specify profile]:profile:_ak_profiles' \
        '1: :_ak_commands' \
        '*:: :->args' && return 0
    
    case $state in
        args)
            case $words[1] in
                config)
                    _ak_config
                    ;;
                key)
                    _ak_key
                    ;;
                profile)
                    _ak_profile
                    ;;
                service)
                    _ak_service
                    ;;
                vault)
                    _ak_vault
                    ;;
            esac
            ;;
    esac
}

_ak_commands() {
    local commands
    commands=(
        'config:Manage configuration settings'
        'key:Key management operations'
        'profile:Profile management'
        'service:Service configuration'
        'vault:Vault operations'
        'help:Show help information'
        'version:Show version information'
    )
    _describe 'commands' commands
}

_ak_config() {
    local config_commands
    config_commands=(
        'init:Initialize configuration'
        'list:List all configuration values'
        'show:Show current configuration'
        'set:Set configuration value'
        'get:Get configuration value'
        'reset:Reset configuration to defaults'
        'doctor:Diagnose configuration issues'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'config commands' config_commands
    else
        case $words[2] in
            set|get)
                _ak_config_keys
                ;;
        esac
    fi
}

_ak_key() {
    local key_commands
    key_commands=(
        'generate:Generate a new key'
        'import:Import key from file'
        'export:Export key to file'
        'list:List all keys'
        'show:Show key details'
        'delete:Delete a key'
        'sign:Sign data with key'
        'verify:Verify signature'
        'encrypt:Encrypt data'
        'decrypt:Decrypt data'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'key commands' key_commands
    else
        case $words[2] in
            generate)
                _arguments \
                    '--name[Key name]:name:' \
                    '--type[Key type]:type:(rsa ecdsa ed25519 aes)' \
                    '--size[Key size]:size:(2048 3072 4096 256 384 521)' \
                    '--output[Output file]:file:_files'
                ;;
            show|delete|export)
                _ak_key_names
                ;;
            import|sign|verify|encrypt|decrypt)
                _files
                ;;
        esac
    fi
}

_ak_profile() {
    local profile_commands
    profile_commands=(
        'create:Create new profile'
        'list:List all profiles'
        'show:Show profile details'
        'activate:Activate profile'
        'delete:Delete profile'
        'export:Export profile'
        'import:Import profile'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'profile commands' profile_commands
    else
        case $words[2] in
            show|activate|delete|export)
                _ak_profiles
                ;;
            import)
                _files
                ;;
        esac
    fi
}

_ak_service() {
    local service_commands
    service_commands=(
        'list:List available services'
        'add:Add new service'
        'remove:Remove service'
        'test:Test service connection'
        'configure:Configure service'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'service commands' service_commands
    else
        case $words[2] in
            remove|test|configure)
                _ak_services
                ;;
        esac
    fi
}

_ak_vault() {
    local vault_commands
    vault_commands=(
        'create:Create new vault'
        'open:Open vault'
        'close:Close vault'
        'lock:Lock vault'
        'unlock:Unlock vault'
        'status:Show vault status'
        'backup:Backup vault'
        'restore:Restore vault'
    )
    
    if (( CURRENT == 2 )); then
        _describe 'vault commands' vault_commands
    else
        case $words[2] in
            backup)
                _files
                ;;
            restore)
                _files
                ;;
        esac
    fi
}

# Helper functions to get dynamic completions
_ak_profiles() {
    local profiles
    if (( $+commands[ak] )); then
        profiles=(${(f)"$(ak profile list --names-only 2>/dev/null)"})
        _describe 'profiles' profiles
    fi
}

_ak_key_names() {
    local keys
    if (( $+commands[ak] )); then
        keys=(${(f)"$(ak key list --names-only 2>/dev/null)"})
        _describe 'keys' keys
    fi
}

_ak_services() {
    local services
    if (( $+commands[ak] )); then
        services=(${(f)"$(ak service list --names-only 2>/dev/null)"})
        _describe 'services' services
    fi
}

_ak_config_keys() {
    local config_keys
    config_keys=(
        'storage.backend:Storage backend type'
        'storage.path:Storage path'
        'crypto.algorithm:Default crypto algorithm'
        'crypto.key_size:Default key size'
        'security.timeout:Security timeout'
        'security.auto_lock:Auto lock enabled'
        'ui.theme:UI theme'
        'ui.language:UI language'
        'logging.level:Logging level'
        'logging.file:Log file path'
    )
    _describe 'config keys' config_keys
}

# Completion for ak-gui
_ak-gui() {
    _arguments \
        '(-h --help)'{-h,--help}'[Show help information]' \
        '(-v --version)'{-v,--version}'[Show version information]' \
        '--profile[Specify profile]:profile:_ak_profiles' \
        '--config[Specify config file]:config file:_files -g "*.conf"' \
        '--theme[UI theme]:theme:(light dark auto)' \
        '--debug[Enable debug mode]'
}

# Register completions
_ak "$@"

# Also handle ak-gui if it exists
if (( $+commands[ak-gui] )); then
    compdef _ak-gui ak-gui
fi