name: release-ak

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  pages: read
  id-token: write

env:
  BUILD_TYPE: Release
  CMAKE_PRESET: ""
  ARTIFACT_NAME: ak
  # If you use Qt, set these (or handle in your CMakeLists)
  # QT_VERSION: 6.6.3

jobs:
  linux:
    name: Linux (Ubuntu) build & package
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build pkg-config \
            libssl-dev zlib1g-dev \
            dpkg-dev fakeroot \
            qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
          # If you build Qt6 instead of distro Qt5, swap in aqtinstall here.

      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

      - name: Build
        run: cmake --build build --config ${BUILD_TYPE} -j$(nproc)

      # CPack DEB + TGZ
      - name: Package with CPack
        run: |
          cmake --build build --target package
          ls -lah build

      - name: Rename artifacts
        run: |
          mkdir -p dist
          # Grab any produced archives (DEB/TGZ/others)
          cp build/*.deb dist/ 2>/dev/null || true
          cp build/*.tar.gz dist/ 2>/dev/null || true
          # Also provide a plain tar.gz from the build tree if needed
          if [ ! -e dist/*.tar.gz ]; then
            tar czf dist/${{ env.ARTIFACT_NAME }}-linux-x86_64.tar.gz -C build ${{ env.ARTIFACT_NAME }} || true
          fi
          ls -lah dist

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/*

  windows:
    name: Windows build & package
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add MSVC & CMake
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure (CMake + Ninja)
        shell: bash
        run: |
          choco install ninja -y
          cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

      - name: Build
        shell: bash
        run: cmake --build build --config ${BUILD_TYPE} -j 4

      - name: Install NSIS
        run: choco install nsis -y
      - name: Package (CPack NSIS)
        shell: bash
        run: cmake --build build --target package

      - name: Stage & Zip
        shell: bash
        run: |
          mkdir -p dist
          if [ -f "build/${{ env.ARTIFACT_NAME }}.exe" ]; then
            cp "build/${{ env.ARTIFACT_NAME }}.exe" dist/
          else
            # If your exe lives elsewhere, adjust
            find build -maxdepth 2 -name "*.exe" -exec cp {} dist/ \;
          fi
          7z a -tzip "dist/${{ env.ARTIFACT_NAME }}-windows-x86_64.zip" ./dist/*.exe

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/*

  macos:
    name: macOS build & package
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install deps
        run: |
          brew update
          brew install cmake ninja
          brew install qt@6
          export CMAKE_PREFIX_PATH="$(brew --prefix qt@6)"

      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"

      - name: Build
        run: cmake --build build --config ${BUILD_TYPE} -j 3

      - name: Package with CPack (dmg + tgz if configured)
        run: |
          cmake --build build --target package || true
          mkdir -p dist
          cp build/*.dmg dist/ 2>/dev/null || true
          cp build/*.tar.gz dist/ 2>/dev/null || true
          if [ ! -e dist/*.tar.gz ]; then
            tar czf dist/${{ env.ARTIFACT_NAME }}-macos-universal.tar.gz -C build ${{ env.ARTIFACT_NAME }} || true
          fi
          ls -lah dist

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: [linux, windows, macos]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected

      - name: List artifacts
        run: find collected -type f -maxdepth 3 -print

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            collected/linux/**
            collected/windows/**
            collected/macos/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_apt_repo:
    name: Publish APT repo to gh-pages
    runs-on: ubuntu-22.04
    needs: [linux]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout (keep history for gh-pages)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: linux-dist

      - name: Prepare gh-pages worktree
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git show-ref --quiet refs/heads/gh-pages; then
            git worktree add gh-pages gh-pages
          else
            git checkout --orphan gh-pages
            git reset --hard
            echo "<!doctype html><meta charset=utf-8><title>ak APT repo</title><h1>ak APT repo</h1>" > index.html
            git add index.html
            git commit -m "init gh-pages"
            git checkout -
            git worktree add gh-pages gh-pages
          fi

      - name: Build simple APT repo (jammy, bookworm)
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev gnupg
          set -e
          REPO_DIR="gh-pages/apt"
          mkdir -p "${REPO_DIR}/dists/stable/main/binary-amd64"
          mkdir -p "${REPO_DIR}/pool/main/a/ak"
          # copy .deb(s)
          shopt -s nullglob
          for deb in linux-dist/*.deb; do
            cp -v "$deb" "${REPO_DIR}/pool/main/a/ak/"
          done
          # generate Packages
          pushd "${REPO_DIR}"
          dpkg-scanpackages --multiversion pool/main/a/ak > dists/stable/main/binary-amd64/Packages
          gzip -fk dists/stable/main/binary-amd64/Packages
          popd

      - name: (Optional) Sign Release files
        if: ${{ secrets.AK_REPO_GPG_PRIVKEY != '' && secrets.AK_REPO_GPG_PASSPHRASE != '' }}
        env:
          GPG_PRIV: ${{ secrets.AK_REPO_GPG_PRIVKEY }}
          GPG_PASS: ${{ secrets.AK_REPO_GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIV" | base64 -d > privkey.asc
          gpg --batch --import privkey.asc
          rm -f privkey.asc
          gpg --batch --yes --passphrase "$GPG_PASS" --armor --detach-sign gh-pages/apt/dists/stable/main/binary-amd64/Packages.gz

      - name: Commit & push gh-pages
        run: |
          cd gh-pages
          git add -A
          git commit -m "Publish APT repo for $GITHUB_REF_NAME" || echo "No changes to commit"
          git push origin gh-pages

      - name: Output repo instructions
        run: |
          echo "::notice::APT repo published at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/apt"
  winget_manifest:
    name: Generate winget manifest
    runs-on: windows-2022
    needs: [windows]
    steps:
      - uses: actions/checkout@v4
      - name: Install wingetcreate
        shell: pwsh
        run: |
          iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
      - name: Download Windows asset from Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          mkdir dl
          gh release download $tag --pattern "*windows*.zip" --dir dl
      - name: Create manifest (artifact only)
        shell: pwsh
        run: |
          $zip = Get-ChildItem dl\*.zip | Select-Object -First 1
          ./wingetcreate.exe new `
            --version "${{ github.ref_name }}" `
            --url "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${($zip.Name)}" `
            --silent `
            --output winget
      - uses: actions/upload-artifact@v4
        with:
          name: winget-manifest
          path: winget/**
